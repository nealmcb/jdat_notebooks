Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Execute calwebb_detector1 pipeline on raw simulation output.  This will overwrite previous reductions.

allshortfiles = glob.glob('20210413_*_mirisim/det_images/*MIRIFUSHORT*fits')
alllongfiles = glob.glob('20210413_*_mirisim/det_images/*MIRIFULONG*fits')
      
pipe1short = Detector1Pipeline()

# run calwebb_detector1 on the MIRIFUSHORT data separate from MIRIFULONG data, as it saves time this way
for shortfile in allshortfiles:
    print(shortfile)
    baseshort, remaindershort = shortfile.split('.')
    
    # If you run your own simulations, you will need to update these hardcoded files.
    beforestuffshort, dateafterstuffshort = shortfile.split('20210413_')    
    datestringshort, afterstuffshort = dateafterstuffshort.split('_mirisim')
    
    pipe1short.refpix.skip = True
    pipe1short.output_file = baseshort + datestringshort
    
    pipe1short.run(shortfile)

pipe1long = Detector1Pipeline()

for longfile in alllongfiles:
    print(longfile)
    baselong, remainderlong = longfile.split('.')
    
    # If you run your own simulations, you will need to update these hardcoded files.
    beforestufflong, dateafterstufflong = longfile.split('20210413_')
    datestringlong, afterstufflong = dateafterstufflong.split('_mirisim')
    
    pipe1long.refpix.skip = True
    pipe1long.output_file = baselong + datestringlong
    
    pipe1long.run(longfile)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Input [0;32mIn [8][0m, in [0;36m<cell line: 9>[0;34m()[0m
[1;32m     17[0m     pipe1short[38;5;241m.[39mrefpix[38;5;241m.[39mskip [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m     18[0m     pipe1short[38;5;241m.[39moutput_file [38;5;241m=[39m baseshort [38;5;241m+[39m datestringshort
[0;32m---> 20[0m     [43mpipe1short[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[43mshortfile[49m[43m)[49m
[1;32m     22[0m pipe1long [38;5;241m=[39m Detector1Pipeline()
[1;32m     24[0m [38;5;28;01mfor[39;00m longfile [38;5;129;01min[39;00m alllongfiles:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/stpipe/step.py:430[0m, in [0;36mStep.run[0;34m(self, *args)[0m
[1;32m    428[0m     [38;5;28mself[39m[38;5;241m.[39mprefetch([38;5;241m*[39margs)
[1;32m    429[0m [38;5;28;01mtry[39;00m:
[0;32m--> 430[0m     step_result [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mprocess[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m)[49m
[1;32m    431[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m [38;5;28;01mas[39;00m e:
[1;32m    432[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mprocess() takes exactly[39m[38;5;124m"[39m [38;5;129;01min[39;00m [38;5;28mstr[39m(e):

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/jwst/pipeline/calwebb_detector1.py:71[0m, in [0;36mDetector1Pipeline.process[0;34m(self, input)[0m
[1;32m     68[0m log[38;5;241m.[39minfo([38;5;124m'[39m[38;5;124mStarting calwebb_detector1 ...[39m[38;5;124m'[39m)
[1;32m     70[0m [38;5;66;03m# open the input as a RampModel[39;00m
[0;32m---> 71[0m [38;5;28minput[39m [38;5;241m=[39m [43mdatamodels[49m[38;5;241;43m.[39;49m[43mRampModel[49m[43m([49m[38;5;28;43minput[39;49m[43m)[49m
[1;32m     73[0m [38;5;66;03m# propagate output_dir to steps that might need it[39;00m
[1;32m     74[0m [38;5;28mself[39m[38;5;241m.[39mdark_current[38;5;241m.[39moutput_dir [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39moutput_dir

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/jwst/datamodels/ramp.py:38[0m, in [0;36mRampModel.__init__[0;34m(self, init, **kwargs)[0m
[1;32m     37[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, init[38;5;241m=[39m[38;5;28;01mNone[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m---> 38[0m     [38;5;28;43msuper[39;49m[43m([49m[43mRampModel[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     40[0m     [38;5;66;03m# Implicitly create arrays[39;00m
[1;32m     41[0m     [38;5;28mself[39m[38;5;241m.[39mpixeldq [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mpixeldq

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/stdatamodels/model_base.py:174[0m, in [0;36mDataModel.__init__[0;34m(self, init, schema, memmap, pass_invalid_values, strict_validation, validate_on_assignment, cast_fits_arrays, validate_arrays, ignore_missing_extensions, **kwargs)[0m
[1;32m    171[0m         schema [38;5;241m=[39m _DEFAULT_SCHEMA
[1;32m    172[0m     [38;5;28;01melse[39;00m:
[1;32m    173[0m         [38;5;66;03m# Create an AsdfFile so we can use its resolver for loading schemas[39;00m
[0;32m--> 174[0m         schema [38;5;241m=[39m [43masdf_schema[49m[38;5;241;43m.[39;49m[43mload_schema[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mschema_url[49m[43m,[49m[43m [49m[43mresolve_references[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m    176[0m [38;5;28mself[39m[38;5;241m.[39m_schema [38;5;241m=[39m mschema[38;5;241m.[39mmerge_property_trees(schema)
[1;32m    178[0m [38;5;66;03m# Provide the object as context to other classes and functions[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:443[0m, in [0;36mload_schema[0;34m(url, resolver, resolve_references, resolve_local_refs)[0m
[1;32m    438[0m     resolver [38;5;241m=[39m extension[38;5;241m.[39mget_default_resolver()
[1;32m    440[0m [38;5;66;03m# We want to cache the work that went into constructing the schema, but returning[39;00m
[1;32m    441[0m [38;5;66;03m# the same object is treacherous, because users who mutate the result will not[39;00m
[1;32m    442[0m [38;5;66;03m# expect that they're changing the schema everywhere.[39;00m
[0;32m--> 443[0m [38;5;28;01mreturn[39;00m copy[38;5;241m.[39mdeepcopy([43m_load_schema_cached[49m[43m([49m[43murl[49m[43m,[49m[43m [49m[43mresolver[49m[43m,[49m[43m [49m[43mresolve_references[49m[43m,[49m[43m [49m[43mresolve_local_refs[49m[43m)[49m)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:490[0m, in [0;36m_load_schema_cached[0;34m(url, resolver, resolve_references, resolve_local_refs)[0m
[1;32m    487[0m [38;5;129m@lru_cache[39m()
[1;32m    488[0m [38;5;28;01mdef[39;00m [38;5;21m_load_schema_cached[39m(url, resolver, resolve_references, resolve_local_refs):
[1;32m    489[0m     loader [38;5;241m=[39m _make_schema_loader(resolver)
[0;32m--> 490[0m     schema, url [38;5;241m=[39m [43mloader[49m[43m([49m[43murl[49m[43m)[49m
[1;32m    492[0m     [38;5;28;01mif[39;00m resolve_references [38;5;129;01mor[39;00m resolve_local_refs:
[1;32m    494[0m         [38;5;28;01mdef[39;00m [38;5;21mresolve_refs[39m(node, json_id):

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:367[0m, in [0;36m_make_schema_loader.<locals>.load_schema[0;34m(url)[0m
[1;32m    363[0m     [38;5;28;01mreturn[39;00m result, url
[1;32m    365[0m [38;5;66;03m# If not, this must be a URL (or missing).  Fall back to fetching[39;00m
[1;32m    366[0m [38;5;66;03m# the schema the old way:[39;00m
[0;32m--> 367[0m [38;5;28;01mreturn[39;00m [43m_load_schema[49m[43m([49m[43murl[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:331[0m, in [0;36m_load_schema[0;34m(url)[0m
[1;32m    328[0m [38;5;129m@lru_cache[39m()
[1;32m    329[0m [38;5;28;01mdef[39;00m [38;5;21m_load_schema[39m(url):
[1;32m    330[0m     [38;5;28;01mif[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124mhttp://[39m[38;5;124m"[39m) [38;5;129;01mor[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124mhttps://[39m[38;5;124m"[39m) [38;5;129;01mor[39;00m url[38;5;241m.[39mstartswith([38;5;124m"[39m[38;5;124masdf://[39m[38;5;124m"[39m):
[0;32m--> 331[0m         [38;5;28;01mraise[39;00m [38;5;167;01mFileNotFoundError[39;00m([38;5;124m"[39m[38;5;124mUnable to fetch schema from non-file URL: [39m[38;5;124m"[39m [38;5;241m+[39m url)
[1;32m    333[0m     [38;5;28;01mwith[39;00m generic_io[38;5;241m.[39mget_file(url) [38;5;28;01mas[39;00m fd:
[1;32m    334[0m         [38;5;28;01mif[39;00m [38;5;28misinstance[39m(url, [38;5;28mstr[39m) [38;5;129;01mand[39;00m url[38;5;241m.[39mendswith([38;5;124m"[39m[38;5;124mjson[39m[38;5;124m"[39m):

[0;31mFileNotFoundError[0m: Unable to fetch schema from non-file URL: http://stsci.edu/schemas/jwst_datamodel/ramp.schema
FileNotFoundError: Unable to fetch schema from non-file URL: http://stsci.edu/schemas/jwst_datamodel/ramp.schema

